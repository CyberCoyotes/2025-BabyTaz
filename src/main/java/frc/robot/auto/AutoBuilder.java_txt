// AutoBuilder.java
package frc.robot.auto;

import com.choreo.lib.ChoreoTrajectory;
import com.choreo.lib.ChoreoTrajectoryState;
import com.ctre.phoenix6.mechanisms.swerve.SwerveDrivetrain;
import com.ctre.phoenix6.mechanisms.swerve.SwerveRequest;
import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.Commands;
import java.util.function.Supplier;

public class AutoBuilder {
    private final SwerveDrivetrain drivetrain;
    private final SwerveRequest.RobotCentric request;

    public AutoBuilder(SwerveDrivetrain drivetrain) {
        this.drivetrain = drivetrain;
        this.request = new SwerveRequest.RobotCentric();
    }

    public Command followTrajectory(ChoreoTrajectory trajectory, boolean resetPose) {
        return Commands.sequence(
            // Reset pose if requested
            Commands.runOnce(() -> {
                if (resetPose) {
                    drivetrain.seedFieldRelative(trajectory.getInitialPose());
                }
            }),
            
            // Follow trajectory
            Commands.run(() -> {
                // Get the current trajectory state
                ChoreoTrajectoryState state = trajectory.sample(drivetrain.getPigeon2().getTimestamp().getSeconds());
                
                // Apply velocities from trajectory
                drivetrain.setControl(
                    request.withVelocityX(state.velocityX)
                          .withVelocityY(state.velocityY) 
                          .withRotationalRate(state.angularVelocity)
                );
            }).until(() -> {
                // End when we reach the end of the trajectory
                double currentTime = drivetrain.getPigeon2().getTimestamp().getSeconds();
                return currentTime >= trajectory.getTotalTime();
            })
        );
    }
}